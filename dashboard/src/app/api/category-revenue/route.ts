import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// This API calculates the total revenue generated by each product category.
export async function GET(request: Request) {
  try {
    const tenantId = "20bacf76-d117-4516-88f8-8dae22428f56"; // Your Tenant ID

    // We need to get all products to map their IDs to categories (productType)
    const products = await prisma.product.findMany({
      where: { tenantId },
      select: { id: true, productType: true },
    });

    // Get all paid order items
    const orderItems = await prisma.orderItem.findMany({
      where: {
        tenantId,
        order: { financialStatus: 'paid' },
        productId: { not: null },
      },
      select: { productId: true, price: true },
    });

    // Aggregate revenue by category
    const revenueByCategory: { [key: string]: number } = {};
    for (const item of orderItems) {
      const product = products.find(p => p.id === item.productId);
      const category = product?.productType || 'Uncategorized';
      if (!revenueByCategory[category]) {
        revenueByCategory[category] = 0;
      }
      revenueByCategory[category] += item.price;
    }

    const categoryData = Object.entries(revenueByCategory).map(([name, value]) => ({
      name,
      value,
    }));

    return NextResponse.json(categoryData);
  } catch (error) {
    console.error("Failed to fetch category revenue:", error);
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}